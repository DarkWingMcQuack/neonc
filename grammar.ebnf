(*This is the grammar of the neo language*)


digit_without_zero = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
digit_with_zero = "0" | digit_without_zero ;

letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" ;

whitespace = " " | "\t" | "\f" | "\r" | "\v" ;

identifier = (letter | "_") , {letter | "_" | digit_with_zero} ;

integer = "0" | (digit_without_zero , {digit_with_zero}) ;

double = integer , "." , {digit_with_zero} , [("e" | "E") , ["+" | "-"] , integer] ;

boolean = "true" | "false" ;

string = '"' , {letter | ("\\" , [letter | "\\" | '"']) | whitespace} , '"' ;

literal = identifier | string | boolean | double | integer ;

end_symbol = "\n" | ";" ;

unary_expression = "+" , expression |
                   "-" , expression |
                   "!" , expression ;

binary_expression = expression , "+"  , expression |
                    expression , "-"  , expression |
                    expression , "*"  , expression |
                    expression , "/"  , expression |
                    expression , "%"  , expression |
                    expression , "<<" , expression |
                    expression , ">>" , expression |
                    expression , "<"  , expression |
                    expression , "<=" , expression |
                    expression , ">"  , expression |
                    expression , ">=" , expression |
                    expression , "==" , expression |
                    expression , "!=" , expression |
                    expression , "&"  , expression |
                    expression , "^"  , expression |
                    expression , "|"  , expression |
                    expression , "&&" , expression |
                    expression , "||" , expression ;

tuple_expression = "(" , expression , "," , expression , {"," , expression} , ")" ;

oneline_if_expression = expression , "if" , expression , "else" , expression ;

function_call_expression = (expression , "(" , [expression , {"," , expression}] , ")") |
						   (expression , "{" , [expression , {"," , expression}] , "}") ;


block_expr = "{" , {statement , end_symbol} , expression ,"}" ;

else_expr = "else" , block_expr ;
elif_expr = "elif" , expression , block_expr ;
if_expr = "if" , expression , block_expr , {elif_expr} , [else_expr] ;

for_monadic_clause = identifier , "<-" , expression ,  ["if", expression];
for_let_clause = identifier , "=" , expression ;
for_clause = for_monadic_clause | for_let_clause ;
for_expr_1 = "for" , "{" , for_monadic_clause , {end_symbol , for_clause} , "}" , "yield" , expression;
for_expr_2 = "for" , "(" , for_monadic_clause , {end_symbol , for_clause} , ")" , "yield" , expression;
for_expr = for_expr_1 | for_expr_2 ;

(*discuss if this syntax is ok or even wanted*)
oneline_for = "[", expression , "for" , for_monadic_clause , ["if", expression] , "]";

lambda_parameter = identifier , [":" , type] ; 
lambda_start = ( "(" , [lambda_parameter , {"," , lambda_parameter}] , ")" ) | lambda_parameter ;
lambda_expr = lambda_start , "=>" , [type] , expression ;


expression = literal                    |
             "(" , expression , ")"     |
			 unary_expression           |
			 binary_expression          |
			 tuple_expression           |
			 function_call_expression   |
			 block_expr                 |
			 if_expr                    |
            for_expr                    |
			 oneline_for                |
			 lambda_expr                |
			 oneline_if_expression;


(*Types*)

named_type = identifier , {"::" , identifier} ;
optional_type = type , "?" ;
tuple_type = "(" , type , "," , type , {"," , type} , ")";
union_type = type , "|" , type , {"|" , type} ;
lambda_paramter_type_list = ("(" , type , "," , type , {"," , type} , ")") | type ;
lambda_type = lambda_paramter_type_list , "=>" , type ;
self_type = "Self" ;

type = "(" , type , ")" |
	   self_type        |
       named_type       |
	   tuple_type       |
	   union_type       |
	   optional_type    |
	   lambda_type      ;


(*Statements*)

let_stmt = "let" , identifier , [":" , type] , "=" , expression , end_symbol;
block = "{" , statement, {end_symbol, statement} , "}" ;
else_stmt = "else" , block ;
elif_stmt = "elif" , expression , block ;
if_stmt = "if" , expression , block , {elif_stmt} , [else_stmt] ;
while_stmt = "while" , expression , block ;

for_stmt_1 = "for" , "{" , for_monadic_clause , {end_symbol , for_clause} , "}" , block ;
for_stmt_2 = "for" , "(" , for_monadic_clause , {end_symbol , for_clause} , ")" , block ;
for_stmt = for_stmt_1 | for_stmt_2 ;

direct_import = "import" , identifier , {"::" , identifier} , ["::" , "*"] ;

typeclass_import = "for" , type , direct_import ;

import = direct_import | typeclass_import ;

statement = let_stmt   |
           if_stmt    |
		   while_stmt |
		   for_stmt   |
		   import     |
		   expression , end_symbol;

struct_member = identifier , ":", type ;
struct = "struct" , identifier , "{" , {struct_member , end_symbol} , "}" ;
